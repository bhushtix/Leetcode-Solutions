FIRST APPROACH:

class Solution {
    int maxDepth=0;
    int sum=0;
    public int deepestLeavesSum(TreeNode root) {
        helper(root,0);
        return sum;
    }

    private void helper(TreeNode root, int depth) {
        if(root==null) return;

        if(root.left==null && root.right==null) {
            if(depth>maxDepth) {
                maxDepth=depth;
                sum=0;
            }

            if(depth>=maxDepth) {
                sum+=root.val;
            }
        }

        helper(root.right, depth+1);
        helper(root.left, depth+1);
    }
}

SECOND APPROACH: BFS

class Solution {
    public int deepestLeavesSum(TreeNode root) {
        Queue<TreeNode> q = new LinkedList();
        q.offer(root);

        int sum = 0;

        while(!q.isEmpty()) {
            sum=0;
            int size = q.size();

            for(int i=0; i<size; i++) {
                TreeNode current = q.poll();
                sum+=current.val;
                if(current.left!=null) q.offer(current.left);
                if(current.right!=null) q.offer(current.right);

            }
        }

        return sum;
    }
}
